"""Token constants."""
# Auto-generated by Tools/scripts/generate_token.py

__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']

ENDMARKER = 0
NAME = 1
NUMBER = 2
STRING = 3
NEWLINE = 4
INDENT = 5
DEDENT = 6
LPAR = 7
RPAR = 8
LSQB = 9
RSQB = 10
COLON = 11
COMMA = 12
SEMI = 13
PLUS = 14
MINUS = 15
STAR = 16
SLASH = 17
VBAR = 18
AMPER = 19
LESS = 20
GREATER = 21
EQUAL = 22
DOT = 23
PERCENT = 24
LBRACE = 25
RBRACE = 26
DLBRACE = 27
DRBRACE = 28
EQEQUAL = 29
NOTEQUAL = 30
LESSEQUAL = 31
GREATEREQUAL = 32
TILDE = 33
CIRCUMFLEX = 34
LEFTSHIFT = 35
RIGHTSHIFT = 36
DOUBLESTAR = 37
PLUSEQUAL = 38
MINEQUAL = 39
STAREQUAL = 40
SLASHEQUAL = 41
PERCENTEQUAL = 42
AMPEREQUAL = 43
VBAREQUAL = 44
CIRCUMFLEXEQUAL = 45
LEFTSHIFTEQUAL = 46
RIGHTSHIFTEQUAL = 47
DOUBLESTAREQUAL = 48
DOUBLESLASH = 49
DOUBLESLASHEQUAL = 50
AT = 51
ATEQUAL = 52
RARROW = 53
ELLIPSIS = 54
COLONEQUAL = 55
EXCLAMATION = 56
OP = 57
AWAIT = 58
ASYNC = 59
TYPE_IGNORE = 60
TYPE_COMMENT = 61
SOFT_KEYWORD = 62
FSTRING_START = 63
FSTRING_MIDDLE = 64
FSTRING_END = 65
# These aren't used by the C tokenizer but are needed for tokenize.py
ERRORTOKEN = 66
COMMENT = 67
NL = 68
ENCODING = 69
N_TOKENS = 70
# Special definitions for cooperation with parser
NT_OFFSET = 256

tok_name = {value: name
            for name, value in globals().items()
            if isinstance(value, int) and not name.startswith('_')}
__all__.extend(tok_name.values())

EXACT_TOKEN_TYPES = {
    '!': EXCLAMATION,
    '!=': NOTEQUAL,
    '%': PERCENT,
    '%=': PERCENTEQUAL,
    '&': AMPER,
    '&=': AMPEREQUAL,
    '(': LPAR,
    ')': RPAR,
    '*': STAR,
    '**': DOUBLESTAR,
    '**=': DOUBLESTAREQUAL,
    '*=': STAREQUAL,
    '+': PLUS,
    '+=': PLUSEQUAL,
    ',': COMMA,
    '-': MINUS,
    '-=': MINEQUAL,
    '->': RARROW,
    '.': DOT,
    '...': ELLIPSIS,
    '/': SLASH,
    '//': DOUBLESLASH,
    '//=': DOUBLESLASHEQUAL,
    '/=': SLASHEQUAL,
    ':': COLON,
    ':=': COLONEQUAL,
    ';': SEMI,
    '<': LESS,
    '<<': LEFTSHIFT,
    '<<=': LEFTSHIFTEQUAL,
    '<=': LESSEQUAL,
    '=': EQUAL,
    '==': EQEQUAL,
    '>': GREATER,
    '>=': GREATEREQUAL,
    '>>': RIGHTSHIFT,
    '>>=': RIGHTSHIFTEQUAL,
    '@': AT,
    '@=': ATEQUAL,
    '[': LSQB,
    ']': RSQB,
    '^': CIRCUMFLEX,
    '^=': CIRCUMFLEXEQUAL,
    '{': LBRACE,
    '{{': DLBRACE,
    '|': VBAR,
    '|=': VBAREQUAL,
    '}': RBRACE,
    '}}': DRBRACE,
    '~': TILDE,
}

def ISTERMINAL(x):
    return x < NT_OFFSET

def ISNONTERMINAL(x):
    return x >= NT_OFFSET

def ISEOF(x):
    return x == ENDMARKER
